// @flow
export type Right<A> = {|
  +value: A,
  +tag: 'Right'
|}

export type Left<E> = {|
  +value: E,
  +tag: 'Left'
|}

export type Either<E, A> =
  | Left<E>
  | Right<A>

export type Just<A> = {|
  +value: A,
  +tag: 'Just'
|}

export type Nothing = {|
  +tag: 'Nothing'
|}

export type Maybe<A> =
  | Just<A>
  | Nothing

export type Success<A> = {|
  +value: A,
  +tag: 'Success'
|}

export type Failure<E> = {|
  +value: E,
  +tag: 'Failure'
|}

export type Loading = {|
  +tag: 'Loading'
|}

export type NotAsked = {|
  +tag: 'NotAsked'
|}

export type RemoteData<E, A> =
  | Success<A>
  | Failure<E>
  | Loading
  | NotAsked

export type Cases<A, B, E> = {|
  Success: A => B,
  Failure: E => B,
  Loading: () => B,
  NotAsked: () => B
|}

export type Effect<A> = () => A

export type IO<A> = {|
  +tag: 'IO',
  +effect: Effect<A>
|}

export type Ordering =
  | 'GT'
  | 'LT'
  | 'EQ'

type Comparable = number | string // eslint-disable-line no-unused-vars

declare export var either: { // eslint-disable-line no-unused-vars
  pure: <E, A>(x: A) => Either<E, A>,
  right: <E, A>(x: A) => Either<E, A>,
  of: <E, A>(x: A) => Either<E, A>,
  left: <E, A>(x: E) => Either<E, A>,
  tryCatch: <E, A>(l: any => E, x: any => A) => Either<E, A>,
  fromNullable: <E, A>(x: A) => Either<E, A>,
  fromMaybe: <E, A>(x: Maybe<A>) => Either<E, A>,
  toMaybe: <E, A>(x: Either<E, A>) => Maybe<A>,
  map:
    & (<E, A, B>(f: (A => B), a: Either<E, A>) => Either<E, B>)
    & (<E, A, B>(f: (A => B)) => (a: Either<E, A>) => Either<E, B>),
  mapLeft:
    & (<E, F, A>(f: (E => F), a: Either<E, A>) => Either<F, A>)
    & (<E, F, A>(f: (E => F)) => (a: Either<E, A>) => Either<F, A>),
  bimap:
    & (<E, F, A, B>(l: (E => F), r: (A => B), x: Either<E, A>) => Either<F, B>)
    & (<E, F, A, B>(l: E => F, r: A => B) => (x: Either<E, A>) => Either<F, B>)
    & (<E, F, A, B>(l: E => F) => (r: A => B, x: Either<E, A>) => Either<F, B>),
  map2:
    & (<E, A, B, C>(f: ((fa: A, fb: B) => C), a: Either<E, A>, b: Either<E, C>) => Either<E, C>)
    & (<E, A, B, C>(f: (fa: A, fb: B) => C) => (a: Either<E, A>, b: Either<E, C>) => Either<E, C>)
    & (<E, A, B, C>(f: (fa: A, fb: B) => C) => (a: Either<E, A>) => (b: Either<E, C>) => Either<E, C>),
  map3:
    & (<E, A, B, C, D>(f: ((fa: A, fb: B, fc: C) => D), a: Either<E, A>, b: Either<E, B>, c: Either<E, C>) => Either<E, D>)
    & (<E, A, B, C, D>(f: ((fa: A, fb: B, fc: C) => D), a: Either<E, A>, b: Either<E, B>) => (d: Either<E, C>) => Either<E, D>)
    & (<E, A, B, C, D>(f: ((fa: A, fb: B, fc: C) => D), a: Either<E, A>) => (b: Either<E, B>, c: Either<E, C>) => Either<E, D>)
    & (<E, A, B, C, D>(f: ((fa: A, fb: B, fc: C) => D)) => (a: Either<E, A>, b: Either<E, B>, c: Either<E, C>) => Either<E, D>),
  map4:
    & (<E, A, B, C, D, F>(f: ((fa: A, fb: B, fc: C, fd: D) => F), a: Either<E, A>, b: Either<E, B>, c: Either<E, C>, d: Either<E, D>) => Either<F>)
    & (<E, A, B, C, D, F>(f: ((fa: A, fb: B, fc: C, fd: D) => F), a: Either<E, A>, b: Either<E, B>, c: Either<E, C>) => (d: Either<E, D>) => Either<E, F>)
    & (<E, A, B, C, D, F>(f: ((fa: A, fb: B, fc: C, fd: D) => F), a: Either<E, A>, b: Either<E, B>) => (c: Either<E, C>, d: Either<E, D>) => Either<E, F>)
    & (<E, A, B, C, D, F>(f: ((fa: A, fb: B, fc: C, fd: D) => F), a: Either<E, A>) => (b: Either<E, B>, c: Either<E, C>, d: Either<E, D>) => Either<E, F>)
    & (<E, A, B, C, D, F>(f: ((fa: A, fb: B, fc: C, fd: D) => F)) => (a: Either<E, A>, b: Either<E, B>, c: Either<E, C>, d: Either<E, D>) => Either<E, F>),
  map5:
    & (<E, A, B, C, D, F, G>(f: ((fa: A, fb: B, fc: C, fd: D, ff: F) => G), a: Either<E, A>, b: Either<E, B>, c: Either<E, C>, d: Either<E, D>, f: Either<E, F>) => Either<E, G>)
    & (<E, A, B, C, D, F, G>(f: ((fa: A, fb: B, fc: C, fd: D, ff: F) => G), a: Either<E, A>, b: Either<E, B>, c: Either<E, C>, d: Either<E, D>) => (f: Either<E, F>) => Either<E, G>)
    & (<E, A, B, C, D, F, G>(f: ((fa: A, fb: B, fc: C, fd: D, ff: F) => G) => B, a: Either<E, A>, b: Either<E, B>, c: Either<E, C>) => (d: Either<E, D>, f: Either<E, F>) => Either<E, G>)
    & (<E, A, B, C, D, F, G>(f: ((fa: A, fb: B, fc: C, fd: D, ff: F) => G) => B, a: Either<E, A>, b: Either<E, B>) => (c: Either<E, C>, d: Either<E, D>, f: Either<E, F>) => Either<E, G>)
    & (<E, A, B, C, D, F, G>(f: ((fa: A, fb: B, fc: C, fd: D, ff: F) => G) => B, a: Either<E, A>) => (b: Either<E, B>, c: Either<E, C>, d: Either<E, D>, f: Either<E, F>) => Either<E, G>)
    & (<E, A, B, C, D, F, G>(f: ((fa: A, fb: B, fc: C, fd: D, ff: F) => G) => B) => (a: Either<E, A>, b: Either<E, B>, c: Either<E, C>, d: Either<E, D>, f: Either<E, F>) => Either<E, G>),
  lift2:
    & (<E, A, B, C>(f: Either<E, (fa: A, fb: B) => C>, a: Either<E, A>, b: Either<E, B>) => Either<E, C>)
    & (<E, A, B, C>(f: Either<E, (fa: A, fb: B) => C>, a: Either<E, A>) => (b: Either<E, B>) => Either<E, C>)
    & (<E, A, B, C>(f: Either<E, (fa: A, fb: B) => C>) => (a: Either<E, A>) => (b: Either<E, B>) => Either<E, C>),
  lift3:
    & (<E, A, B, C, D>(f: Either<E, (fa: A, fb: B, fc: C) => D>, a: Either<E, A>, b: Either<E, B>, c: Either<E, C>) => Either<E, D>)
    & (<E, A, B, C, D>(f: Either<E, (fa: A, fb: B, fc: C) => D>, a: Either<E, A>, b: Either<E, B>) => (c: Either<E, C>) => Either<E, D>)
    & (<E, A, B, C, D>(f: Either<E, (fa: A, fb: B, fc: C) => D>, a: Either<E, A>) => (b: Either<E, B>, c: Either<E, C>) => Either<E, D>)
    & (<E, A, B, C, D>(f: Either<E, (fa: A, fb: B, fc: C) => D>) => (a: Either<E, A>, b: Either<E, B>, c: Either<E, C>) => Either<E, D>),
  chain:
    & (<E, A, B>(f: (A => Either<E, B>), x: Either<E, A>) => Either<E, B>)
    & (<E, A, B>(f: A => Either<E, B>) => (x: Either<E, A>) => Either<E, B>),
  flatMap:
    & (<E, A, B>(f: (A => Either<E, B>), x: Either<E, A>) => Either<E, B>)
    & (<E, A, B>(f: A => Either<E, B>) => (x: Either<E, A>) => Either<E, B>),
  bind:
    & (<E, A, B>(f: (A => Either<E, B>), x: Either<E, A>) => Either<E, B>)
    & (<E, A, B>(f: A => Either<E, B>) => (x: Either<E, A>) => Either<E, B>),
  ap:
    & (<E, A, B>(a: Either<E, A>, f: (Either<E, A => B>)) => Either<E, B>)
    & (<E, A, B>(a: Either<E, A>) => (f: Either<E, A => B>) => Either<E, B>),
  fold:
    & (<E, A, B>(left: (E => B), right: (A => B), x: Either<E, A>) => B)
    & (<E, A, B>(left: E => B, right: A => B) => (x: Either<E, A>) => B)
    & (<E, A, B>(left: E => B) => (right: (A => B), x: Either<E, A>) => B),
  get: <E, A>(x: Either<E, A>) => A,
  getOrElse:
    & (<E, A>(f: (E) => A, x: Either<E, A>) => A)
    & (<E, A>(f: (E) => A) => (x: Either<E, A>) => A),
  isLeft: <E, A>(x: Either<E, A>) => boolean,
  isRight: <E, A>(x: Either<E, A>) => boolean,
  equals: <E, A>(x: Either<E, A>, y: Either<E, A>) => boolean
}

declare export var maybe: { // eslint-disable-line no-unused-vars
  pure: <A>(x: A) => Maybe<A>,
  just: <A>(x: A) => Maybe<A>,
  of: <A>(x: A) => Maybe<A>,
  nothing: <A>() => Maybe<A>,
  fromNullable: <A>(x: A) => Maybe<A>,
  chain:
    & (<A, B>(f: (A => Maybe<B>), x: Maybe<A>) => Maybe<B>)
    & (<A, B>(f: (A) => Maybe<B>) => (x: Maybe<A>) => Maybe<B>),
  flatMap:
    & (<A, B>(f: (A => Maybe<B>), x: Maybe<A>) => Maybe<B>)
    & (<A, B>(f: (A) => Maybe<B>) => (x: Maybe<A>) => Maybe<B>),
  bind:
    & (<A, B>(f: (A => Maybe<B>), x: Maybe<A>) => Maybe<B>)
    & (<A, B>(f: (A) => Maybe<B>) => (x: Maybe<A>) => Maybe<B>),
  map:
    & (<A, B>(f: (A => B), x: Maybe<A>) => Maybe<B>)
    & (<A, B>(f: (A) => B) => (x: Maybe<A>) => Maybe<B>),
  map2:
    & (<A, B, C>(f: ((fa: A, fb: B) => C), a: Maybe<A>, b: Maybe<C>) => Maybe<C>)
    & (<A, B, C>(f: (fa: A, fb: B) => C) => (a: Maybe<A>, b: Maybe<C>) => Maybe<C>)
    & (<A, B, C>(f: (fa: A, fb: B) => C) => (a: Maybe<A>) => (b: Maybe<C>) => Maybe<C>),
  map3:
    & (<A, B, C, D>(f: ((fa: A, fb: B, fc: C) => D), a: Maybe<A>, b: Maybe<B>, c: Maybe<C>) => Maybe<D>)
    & (<A, B, C, D>(f: ((fa: A, fb: B, fc: C) => D), a: Maybe<A>, b: Maybe<B>) => (d: Maybe<C>) => Maybe<D>)
    & (<A, B, C, D>(f: ((fa: A, fb: B, fc: C) => D), a: Maybe<A>) => (b: Maybe<B>, c: Maybe<C>) => Maybe<D>)
    & (<A, B, C, D>(f: ((fa: A, fb: B, fc: C) => D)) => (a: Maybe<A>, b: Maybe<B>, c: Maybe<C>) => Maybe<D>),
  map4:
    & (<A, B, C, D, E>(f: ((fa: A, fb: B, fc: C, fd: D) => E), a: Maybe<A>, b: Maybe<B>, c: Maybe<B>, d: Maybe<D>) => Maybe<E>)
    & (<A, B, C, D, E>(f: ((fa: A, fb: B, fc: C, fd: D) => E), a: Maybe<A>, b: Maybe<B>, c: Maybe<C>) => (d: Maybe<D>) => Maybe<E>)
    & (<A, B, C, D, E>(f: ((fa: A, fb: B, fc: C, fd: D) => E), a: Maybe<A>, b: Maybe<B>) => (c: Maybe<C>, d: Maybe<D>) => Maybe<E>)
    & (<A, B, C, D, E>(f: ((fa: A, fb: B, fc: C, fd: D) => E), a: Maybe<A>) => (b: Maybe<B>, c: Maybe<C>, d: Maybe<D>) => Maybe<E>)
    & (<A, B, C, D, E>(f: ((fa: A, fb: B, fc: C, fd: D) => E)) => (a: Maybe<A>, b: Maybe<B>, c: Maybe<C>, d: Maybe<D>) => Maybe<E>),
  map5:
    & (<A, B, C, D, E, F>(f: ((fa: A, fb: B, fc: C, fd: D, fe: E) => F), a: Maybe<A>, b: Maybe<B>, c: Maybe<C>, d: Maybe<D>, e: Maybe<E>) => Maybe<F>)
    & (<A, B, C, D, E, F>(f: ((fa: A, fb: B, fc: C, fd: D, fe: E) => F), a: Maybe<A>, b: Maybe<B>, c: Maybe<C>, d: Maybe<D>) => (e: Maybe<E>) => Maybe<F>)
    & (<A, B, C, D, E, F>(f: ((fa: A, fb: B, fc: C, fd: D, fe: E) => F) => B, a: Maybe<A>, b: Maybe<B>, c: Maybe<C>) => (d: Maybe<D>, e: Maybe<E>) => Maybe<F>)
    & (<A, B, C, D, E, F>(f: ((fa: A, fb: B, fc: C, fd: D, fe: E) => F) => B, a: Maybe<A>, b: Maybe<B>) => (c: Maybe<C>, d: Maybe<D>, e: Maybe<E>) => Maybe<F>)
    & (<A, B, C, D, E, F>(f: ((fa: A, fb: B, fc: C, fd: D, fe: E) => F) => B, a: Maybe<A>) => (b: Maybe<B>, c: Maybe<C>, d: Maybe<D>, e: Maybe<E>) => Maybe<F>)
    & (<A, B, C, D, E, F>(f: ((fa: A, fb: B, fc: C, fd: D, fe: E) => F) => B) => (a: Maybe<A>, b: Maybe<B>, c: Maybe<C>, d: Maybe<D>, e: Maybe<E>) => Maybe<F>),
  lift2:
    & (<A, B, C>(f: Maybe<(fa: A, fb: B) => C>, a: Maybe<A>, b: Maybe<B>) => Maybe<C>)
    & (<A, B, C>(f: Maybe<(fa: A, fb: B) => C>, a: Maybe<A>) => (b: Maybe<B>) => Maybe<C>)
    & (<A, B, C>(f: Maybe<(fa: A, fb: B) => C>) => (a: Maybe<A>) => (b: Maybe<B>) => Maybe<C>),
  lift3:
    & (<A, B, C, D>(f: Maybe<(fa: A, fb: B, fc: C) => D>, a: Maybe<A>, b: Maybe<B>, c: Maybe<C>) => Maybe<D>)
    & (<A, B, C, D>(f: Maybe<(fa: A, fb: B, fc: C) => D>, a: Maybe<A>, b: Maybe<B>) => (c: Maybe<C>) => Maybe<D>)
    & (<A, B, C, D>(f: Maybe<(fa: A, fb: B, fc: C) => D>, a: Maybe<A>) => (b: Maybe<B>, c: Maybe<C>) => Maybe<D>)
    & (<A, B, C, D>(f: Maybe<(fa: A, fb: B, fc: C) => D>) => (a: Maybe<A>, b: Maybe<B>, c: Maybe<C>) => Maybe<D>),
  ap:
    & (<A, B>(x: Maybe<A>, f: Maybe<A => B>) => Maybe<B>)
    & (<A, B>(x: Maybe<A>) => (f: Maybe<A => B>) => Maybe<B>),
  fold:
    & (<A, B>(n: () => B, j: A => B, x: Maybe<A>) => B)
    & (<A, B>(n: () => B, j: A => B) => (x: Maybe<A>) => B)
    & (<A, B>(n: () => B) => (j: A => B) => (x: Maybe<A>) => B),
  get: <A>(x: Maybe<A>) => A,
  getOrElse:
    & (<A>(f: () => A, x: Maybe<A>) => A)
    & (<A>(f: () => A) => (x: Maybe<A>) => A),
  isJust: <A>(x: Maybe<A>) => boolean,
  isNothing: <A>(x: Maybe<A>) => boolean,
  equals: <A>(x: Maybe<A>, y: Maybe<A>) => boolean
}

declare export var remoteData: { // eslint-disable-line no-unused-vars
  pure: <A, E>(x: A) => RemoteData<E, A>,
  success: <A, E>(x: A) => RemoteData<E, A>,
  of: <A, E>(x: A) => RemoteData<E, A>,
  failure: <A, E>(err: E) => RemoteData<E, A>,
  notAsked: <A, E>() => RemoteData<E, A>,
  loading: <A, E>() => RemoteData<E, A>,
  fromNullable: <A, E>(x: A) => RemoteData<E, A>,
  fold:
    & (<A, B, E>(cases: Cases<A, B, E>, rd: RemoteData<E, A>) => B)
    & (<A, B, E>(cases: Cases<A, B, E>) => (rd: RemoteData<E, A>) => B),
  map:
    & (<A, B, E>(f: A => B, x: RemoteData<E, A>) => RemoteData<E, B>)
    & (<A, B, E>(f: A => B) => (x: RemoteData<E, A>) => RemoteData<E, B>),
  map2:
    & (<A, B, C, E>(f: (a: A, b: B) => C, x: RemoteData<E, A>, y: RemoteData<E, B>) => RemoteData<E, C>)
    & (<A, B, C, E>(f: (a: A, b: B) => C, x: RemoteData<E, A>) => (y: RemoteData<E, B>) => RemoteData<E, C>)
    & (<A, B, C, E>(f: (a: A, b: B) => C) => (x: RemoteData<E, A>) => (y: RemoteData<E, B>) => RemoteData<E, C>),
  map3:
    & (<A, B, C, D, E>(f: (fa: A, fb: B, fc: C) => D, a: RemoteData<E, A>, b: RemoteData<E, B>, c: RemoteData<E, C>) => RemoteData<E, D>)
    & (<A, B, C, D, E>(f: (fa: A, fb: B, fc: C) => D, a: RemoteData<E, A>, b: RemoteData<E, B>) => (c: RemoteData<E, C>) => RemoteData<E, D>)
    & (<A, B, C, D, E>(f: (fa: A, fb: B, fc: C) => D, a: RemoteData<E, A>) => (b: RemoteData<E, B>) => (c: RemoteData<E, C>) => RemoteData<E, D>)
    & (<A, B, C, D, E>(f: (fa: A, fb: B, fc: C) => D) => (a: RemoteData<E, A>) => (b: RemoteData<E, B>) => (c: RemoteData<E, C>) => RemoteData<E, D>),
  map4:
    & (<A, B, C, D, F, E>(f: (fa: A, fb: B, fc: C, fd: D) => F, a: RemoteData<E, A>, b: RemoteData<E, B>, c: RemoteData<E, C>, d: RemoteData<E, D>) => RemoteData<E, F>)
    & (<A, B, C, D, F, E>(f: (fa: A, fb: B, fc: C, fd: D) => F, a: RemoteData<E, A>, b: RemoteData<E, B>, c: RemoteData<E, C>) => (d: RemoteData<E, D>) => RemoteData<E, F>)
    & (<A, B, C, D, F, E>(f: (fa: A, fb: B, fc: C, fd: D) => F, a: RemoteData<E, A>, b: RemoteData<E, B>) => (c: RemoteData<E, C>) => (d: RemoteData<E, D>) => RemoteData<E, F>)
    & (<A, B, C, D, F, E>(f: (fa: A, fb: B, fc: C, fd: D) => F, a: RemoteData<E, A>) => (b: RemoteData<E, B>) => (c: RemoteData<E, C>) => (d: RemoteData<E, D>) => RemoteData<E, F>)
    & (<A, B, C, D, F, E>(f: (fa: A, fb: B, fc: C, fd: D) => F) => (a: RemoteData<E, A>) => (b: RemoteData<E, B>) => (c: RemoteData<E, C>) => (d: RemoteData<E, D>) => RemoteData<E, F>),
  map5:
    & (<A, B, C, D, F, G, E>(f: (fa: A, fb: B, fc: C, fd: D, ff: F) => G, a: RemoteData<E, A>, b: RemoteData<E, B>, c: RemoteData<E, C>, d: RemoteData<E, D>, f1: RemoteData<E, F>) => RemoteData<E, G>)
    & (<A, B, C, D, F, G, E>(f: (fa: A, fb: B, fc: C, fd: D, ff: F) => G, a: RemoteData<E, A>, b: RemoteData<E, B>, c: RemoteData<E, C>, d: RemoteData<E, D>) => (f1: RemoteData<E, F>) => RemoteData<E, G>)
    & (<A, B, C, D, F, G, E>(f: (fa: A, fb: B, fc: C, fd: D, ff: F) => G, a: RemoteData<E, A>, b: RemoteData<E, B>, c: RemoteData<E, C>) => (d: RemoteData<E, D>) => (f1: RemoteData<E, F>) => RemoteData<E, G>)
    & (<A, B, C, D, F, G, E>(f: (fa: A, fb: B, fc: C, fd: D, ff: F) => G, a: RemoteData<E, A>, b: RemoteData<E, B>) => (c: RemoteData<E, C>) => (d: RemoteData<E, D>) => (f1: RemoteData<E, F>) => RemoteData<E, G>)
    & (<A, B, C, D, F, G, E>(f: (fa: A, fb: B, fc: C, fd: D, ff: F) => G, a: RemoteData<E, A>) => (b: RemoteData<E, B>) => (c: RemoteData<E, C>) => (d: RemoteData<E, D>) => (f1: RemoteData<E, F>) => RemoteData<E, G>)
    & (<A, B, C, D, F, G, E>(f: (fa: A, fb: B, fc: C, fd: D, ff: F) => G) => (a: RemoteData<E, A>) => (b: RemoteData<E, B>) => (c: RemoteData<E, C>) => (d: RemoteData<E, D>) => (f1: RemoteData<E, F>) => RemoteData<E, G>),
  lift2:
    & (<A, B, C, E>(f: RemoteData<E, (a: A, b: B) => C>, x: RemoteData<E, A>, y: RemoteData<E, B>) => RemoteData<E, C>)
    & (<A, B, C, E>(f: RemoteData<E, (a: A, b: B) => C>, x: RemoteData<E, A>) => (y: RemoteData<E, B>) => RemoteData<E, C>)
    & (<A, B, C, E>(f: RemoteData<E, (a: A, b: B) => C>) => (x: RemoteData<E, A>) => (y: RemoteData<E, B>) => RemoteData<E, C>),
  lift3:
    & (<A, B, C, D, E>(f: RemoteData<E, (fa: A, fb: B, fc: C) => D>, a: RemoteData<E, A>, b: RemoteData<E, B>, c: RemoteData<E, C>) => RemoteData<E, D>)
    & (<A, B, C, D, E>(f: RemoteData<E, (fa: A, fb: B, fc: C) => D>, a: RemoteData<E, A>, b: RemoteData<E, B>) => (c: RemoteData<E, C>) => RemoteData<E, D>)
    & (<A, B, C, D, E>(f: RemoteData<E, (fa: A, fb: B, fc: C) => D>, a: RemoteData<E, A>) => (b: RemoteData<E, B>) => (c: RemoteData<E, C>) => RemoteData<E, D>)
    & (<A, B, C, D, E>(f: RemoteData<E, (fa: A, fb: B, fc: C) => D>) => (a: RemoteData<E, A>) => (b: RemoteData<E, B>) => (c: RemoteData<E, C>) => RemoteData<E, D>),
  mapLeft:
    & (<A, E, F>(f: E => F, x: RemoteData<E, A>) => RemoteData<F, A>)
    & (<A, E, F>(f: E => F) => (x: RemoteData<E, A>) => RemoteData<F, A>),
  chain:
    & (<A, B, E>(f: A => RemoteData<E, B>, x: RemoteData<E, A>) => RemoteData<E, B>)
    & (<A, B, E>(f: A => RemoteData<E, B>) => (x: RemoteData<E, A>) => RemoteData<E, B>),
  flatMap:
    & (<A, B, E>(f: A => RemoteData<E, B>, x: RemoteData<E, A>) => RemoteData<E, B>)
    & (<A, B, E>(f: A => RemoteData<E, B>) => (x: RemoteData<E, A>) => RemoteData<E, B>),
  bind:
    & (<A, B, E>(f: A => RemoteData<E, B>, x: RemoteData<E, A>) => RemoteData<E, B>)
    & (<A, B, E>(f: A => RemoteData<E, B>) => (x: RemoteData<E, A>) => RemoteData<E, B>),
  ap:
    & (<A, B, E>(f: RemoteData<E, A => B>, x: RemoteData<E, A>) => RemoteData<E, B>)
    & (<A, B, E>(f: RemoteData<E, A => B>) => (x: RemoteData<E, A>) => RemoteData<E, B>),
  equals: <A, E>(RemoteData<E, A>, RemoteData<E, A>) => boolean,
  get: <A, E>(RemoteData<E, A>) => A,
  getOrElse:
    & (<A, B, E>(f: () => B, x: RemoteData<E, A>) => B)
    & (<A, B, E>(f: () => B) => (x: RemoteData<E, A>) => B),
  isSuccess: <A, E>(RemoteData<E, A>) => boolean,
  isFailure: <A, E>(RemoteData<E, A>) => boolean,
  isLoading: <A, E>(RemoteData<E, A>) => boolean,
  isNotAsked: <A, E>(RemoteData<E, A>) => boolean,
  toMaybe: (<A, E>(x: RemoteData<E, A>) => Maybe<A>),
  fromMaybe: (<A, E>(x: Maybe<A>) => RemoteData<E, A>),
  toEither: (<A, E>(x: RemoteData<E, A>) => Either<E, A>),
  fromEither: (<A, E>(x: Either<A, E>) => RemoteData<E, A>)
}

declare export var io: { // eslint-disable-line no-unused-vars
  from: (<A>(Effect<A>) => IO<A>),
  of: (<A>(A) => IO<A>),
  map:
    & (<A, B>(f: (A) => B, x: IO<A>) => IO<B>)
    & (<A, B>(f: (A) => B) => (x: IO<A>) => IO<B>),
  ap:
    & (<A, B>(f: IO<A => B>, x: IO<A>) => IO<B>)
    & (<A, B>(f: IO<A => B>) => (x: IO<A>) => IO<B>),
  chain:
    & (<A, B>(f: (A) => IO<B>, x: IO<A>) => IO<B>)
    & (<A, B>(f: (A) => IO<B>) => (x: IO<A>) => IO<B>),
  run: <A>(x: IO<A>) => A
}

declare export var ordering: { // eslint-disable-line no-unused-vars
  GT: Ordering,
  LT: Ordering,
  EQ: Ordering,
  compare:
    & (x: Comparable, y: Comparable) => Ordering
    & (x: Comparable) => (y: Comparable) => Ordering
}

declare export var pipe: $ComposeReverse // eslint-disable-line no-unused-vars

declare export var compose: $Compose // eslint-disable-line no-unused-vars

declare export var tap: // eslint-disable-line no-unused-vars
  & <A>(f: any => any, x: A) => A
  & <A>(f: any => any) => (x: A) => A

declare export var flip: // eslint-disable-line no-unused-vars
  <A, B, C>(f: (x: A, y: B, ...z: *[]) => C) => ((x: B, y: C, ...z: *[]) => C)
